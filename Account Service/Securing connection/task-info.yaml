type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/account/config/AuthenticationFailureListener.java
  visible: true
  text: |
    package account.config;

    import account.role.Role;
    import account.security.SecurityEvents;
    import account.security.SecurityLogService;
    import account.user.User;
    import account.user.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import java.util.Optional;

    @Component
    public class AuthenticationFailureListener implements
            ApplicationListener<AuthenticationFailureBadCredentialsEvent> {
        @Autowired
        private HttpServletRequest request;
        @Autowired
        private UserService userService;
        @Autowired
        private SecurityLogService securityLogService;


        @Override
        public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent e) {
            //todo
            Optional<User> userOptional = userService.getUser(e.getAuthentication().getName());
            SecurityEvents securityEvents = null;
            if (userOptional.isPresent()) {
                User user = userOptional.get();
                if (user.getFailedAttempt() < 5) {
                    securityLogService.saveEvent(
                            SecurityEvents.LOGIN_FAILED, e.getAuthentication().getName(),
                            request.getRequestURI(), request.getRequestURI());
                    if (user.getFailedAttempt() == 4 && !user.getRoles().contains(Role.ROLE_ADMINISTRATOR)) {
                        securityLogService.saveEvent(
                                SecurityEvents.BRUTE_FORCE, e.getAuthentication().getName(),
                                request.getRequestURI(), request.getRequestURI());
                        userService.lock(user);
                        securityLogService.saveEvent(SecurityEvents.LOCK_USER, e.getAuthentication().getName(),
                                "Lock user " + user.getUsername(), "/api/admin/user/access");
                    }
                }
                userService.increaseFailedAttempts(user);
            } else {
                securityLogService.saveEvent(
                        SecurityEvents.LOGIN_FAILED, e.getAuthentication().getName(),
                        request.getRequestURI(), request.getRequestURI());
            }


        }
    }
  learner_created: true
- name: src/account/role/RoleService.java
  visible: true
  text: |
    package account.role;

    import account.security.SecurityEvents;
    import account.security.SecurityLogService;
    import account.user.User;
    import account.user.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;
    import java.util.Optional;

    @Service
    public class RoleService {

        @Autowired
        private UserRepository userRepository;
        @Autowired
        private SecurityLogService securityLogService;

        public User changeRole(RoleChange roleChange){
            Optional<User> userFromDB = userRepository.findByUsernameIgnoreCase(roleChange.getUser());
            Role role = validateRole(roleChange.getRole());

            SecurityEvents securityEvents = SecurityEvents.DEFAULT_VALUE;
            String object = null;

            if (userFromDB.isPresent()) {
                User user = userFromDB.get();
                roleLogicValidator(user.getRoles(), role);

                if (roleChange.getOperation().equals("GRANT")) {
                    if (user.getRoles().contains(role)) {
                        throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role exists");
                    }
                    user.grantAuthority(role);
                    //builds the security logging object.
                    securityEvents = SecurityEvents.GRANT_ROLE;
                    object = "Grant role " + roleChange.getRole() + " to " + user.getEmail();

                } else if (roleChange.getOperation().equals("REMOVE")) {
                    if (!user.getRoles().contains(role)) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                                "The user does not have a role!");
                    } else if (user.getRoles().contains(role) && role.equals(Role.ROLE_ADMINISTRATOR)) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                                "Can't remove ADMINISTRATOR role!");
                    } else if (user.getRoles().size() == 1) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                                "The user must have at least one role!");
                    }
                    user.removeAuthority(role);

                    securityEvents = SecurityEvents.REMOVE_ROLE;
                    object = "Remove role " + roleChange.getRole() + " from " + user.getEmail();

                }
                securityLogService.saveEvent(securityEvents, securityLogService.getUserName(),
                        object, "/api/admin/user/role");
                return userRepository.save(user);
            } else {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            }
        }

        private Role validateRole(String roleString) {
            //Checks for an invalid given role.
            try {
                Role role = Role.valueOf("ROLE_" + roleString);
                return role;
            } catch (IllegalArgumentException e) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
            }
        }

        private void roleLogicValidator(List<Role> roles, Role role) {
            //Requirement for users to be either in an administrative group or a business group.
            //This is enforced by preventing certain roles from overlapping with each other.
            //Admin can't possess the accountant role.
            if (roles.contains(Role.ROLE_ADMINISTRATOR) && role.equals(Role.ROLE_ACCOUNTANT) ||
                    //Accountant can't possess the admin role.
                    (roles.contains(Role.ROLE_ACCOUNTANT) && role.equals(Role.ROLE_ADMINISTRATOR)) ||
                    //Admin can't possess the user role.
                    (roles.contains(Role.ROLE_ADMINISTRATOR) && role.equals(Role.ROLE_USER)) ||
                    //Admin can't possess the auditor role.
                    (roles.contains(Role.ROLE_ADMINISTRATOR) && role.equals(Role.ROLE_AUDITOR)) ) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "The user cannot combine administrative and business roles!");
            }
        }
    }
  learner_created: true
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response,
                             AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/config/CustomAccessDeniedHandler.java
  visible: true
  text: |-
    package account.config;

    import account.security.SecurityEvents;
    import account.security.SecurityLogService;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.time.LocalDateTime;
    import java.util.HashMap;
    import java.util.Map;

    public class CustomAccessDeniedHandler
            implements AccessDeniedHandler {
        private ObjectMapper objectMapper = new ObjectMapper();
        @Autowired
        private SecurityLogService securityLogService;

        @Override
        public void handle(HttpServletRequest request,
                           HttpServletResponse response,
                           AccessDeniedException accessDeniedException)
                throws IOException {
            response.setStatus(HttpStatus.FORBIDDEN.value());

            securityLogService.saveEvent(
                    SecurityEvents.ACCESS_DENIED,
                    securityLogService.getUserName(),
                    request.getRequestURI(),
                    request.getRequestURI());

            Map<String, Object> data = new HashMap<>();
            data.put(
                    "timestamp",
                    LocalDateTime.now().toString());
            data.put(
                    "status",
                    response.getStatus());
            data.put(
                    "error",
                    "Forbidden");
            data.put(
                    "message",
                    "Access Denied!");
            data.put(
                    "path",
                    request.getRequestURI());

            response.getOutputStream()
                    .println(objectMapper.writeValueAsString(data));
        }
    }
  learner_created: true
- name: src/account/config/AuthenticationSuccessEventListener.java
  visible: true
  text: |+
    package account.config;

    import account.user.User;
    import account.user.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import java.util.Optional;

    @Component
    public class AuthenticationSuccessEventListener implements
            ApplicationListener<AuthenticationSuccessEvent> {

        @Autowired
        private HttpServletRequest request;
        @Autowired
        private UserService userService;

        @Override
        public void onApplicationEvent(final AuthenticationSuccessEvent e) {
            //todo
            Optional<User> userOptional = userService.getUser(e.getAuthentication().getName());
            if (userOptional.isPresent()) {
                User user = userOptional.get();
                userService.resetFailedAttempts(user.getUsername());
            }
        }
    }

  learner_created: true
- name: src/account/role/RoleChange.java
  visible: true
  text: |
    package account.role;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class RoleChange {
        private String user;
        private String role;
        private String operation;
    }
  learner_created: true
- name: src/resources/keystore/service.p12
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16607#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 07 Jul 2022 18:29:14 UTC
record: -1
